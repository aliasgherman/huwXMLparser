import pymongo
import pandas as pd
from datetime import datetime
from pymongo import MongoClient

EXPORT_PATH = "E:\\AAM\\exports\\"

CURDATE = "{:04d}".format(datetime.now().year) + "{:02d}".format(datetime.now().month) + "{:02d}".format(datetime.now().day)

TABLES_NEEDED_5G = ["ACL","ACLRULE","ALMPORT","ANTENNAPORT","APPCERT","APPLICATION","BASEBANDEQM",
 "BBP","BBPLINK","BBUFAN","BRDRESASSIGNMENT","BTS59005GTIMEZONE","CABINET","CASCADEPORT",
 "CERTCFG","CERTCHKTSK","CERTDEPLOY","CERTMK","CERTREQ","CHK","CPBEARER","CPRIPORT","CRLPOLICY",
 "CTRLLNK","DHCPRELAYSWITCH","DHCPSW","DIFPRI","DSCP2PCPMAP","DSCP2QUEMAP","EMSTZ","ENERGYCON",
 "EPGROUP","EQUIPMENT","ETHPORT","FTPCLT","FTPCLTPORT","GEPMODELPARA","GNBCIPHERCAPB","GNBCONNSTATETIMER",
 "GNBCURSVDPARAM","GNBCUS1","GNBCUX2","GNBCUX2INTERFACE","GNBCUX2INTERFACE_XPERSIST","GNBDUCONNSTATETIMER",
 "GNBDUMACPARAMGROUP","GNBDURSVDPARAM","GNBFLOWCTRLPARAMGRP","GNBINFOSAMPLECONFIG","GNBINTEGRITYCAPB",
 "GNBOPERATOR","GNBPDCPPARAMGROUP","GNBRLCPARAMGROUP","GNBRSVDOPTHRISK","GNBRSVDOPTPARAM","GNBTRACKINGAREA",
 "GNBX2SONCONFIG","GNODEBFUNCTION","GNODEBPARAM","GPS","GTPU","GTRANSPARA","GTRANSPARAGW","IKECFG","IKEPEER",
 "IKEPROPOSAL","INGCHKTSK","INTERFACE","INVENTORYBOARD","INVENTORYFRAME","INVENTORYHOSTVER","INVENTORYPORT",
 "INVENTORYRACK","INVENTORYSLOT","IPADDR4","IPCLKLNK","IPGUARD","IPROUTE4","IPRSCGRP","IPSECBINDITF","IPSECPOLICY",
 "IPSECPROPOSAL","LLDPGLOBAL","LOCALETHPORT","LOCALIP","LOCALIP6","LOOPBACK","MAINSALARMBIND","MANRESALMRPT",
 "MPT","NE","NEMNT","NODE","NRBOARD","NRCELL","NRCELLALGOSWITCH","NRCELLCAMGMTCONFIG","NRCELLMEASPARAMGROUP",
 "NRCELLNSADCCONFIG","NRCELLQCIBEARER","NRCELLRELATION","NRCELLRSVDOPTPARAM","NRCELLRSVDPARAM","NRCELLSRS",
 "NRDUCELL","NRDUCELLALGOSWITCH","NRDUCELLCHNPWR","NRDUCELLCORESET","NRDUCELLCOVERAGE","NRDUCELLCSIRS",
 "NRDUCELLPDCCH","NRDUCELLPDSCH","NRDUCELLPRACH","NRDUCELLPUCCH","NRDUCELLPUSCH","NRDUCELLQCIBEARER",
 "NRDUCELLRSVDOPTHRISK","NRDUCELLRSVDOPTPARAM","NRDUCELLRSVDPARAM","NRDUCELLSRS","NRDUCELLSRSMEASSINR",
 "NRDUCELLTRP","NRDUCELLTRPBEAM","NRDUCELLUETIMERCONST","NRDUCELLULTACONFIG","NREXTERNALNCELL","OMCH","OP",
 "PEERCLK","PEU","PHYPORT","PLRTHRESHOLD","PMTUCFG","PORTPOLICY","PWDPOLICY","RETPORT","RRU","RRUCHAIN",
 "RXBRANCH","SCTPHOST","SCTPLNK","SCTPPEER","SCTPTEMPLATE","SECTOR","SECTOREQM","SFP","SSL","SUBRACK",
 "SYNCETH","TASM","TIMESRC","TIMETHRD","TRANSFUNCTIONSW","TRUSTCERT","TXBRANCH","TZ","UDT","UDTPARAGRP",
 "UEIU","USB","USERPLANEHOST","USERPLANEPEER","VRF","WEBLMT"]

C_DBNAME = 'huwNR'
#C_COLLNAME = 'INTERFREQNCELL'
C_DATEPARAM = 'AAMDATE'
C_MAXDATE = ''
C_COLSTODROP = ['_id', 'AAMTIME', 'DUMPDATE', 'DUMPFILE', 'PROCESSDATE']


def get_max_date_from_tz(DBNAME, COLLNAME='TZ', MAXDATEPARAM="AAMDATE"):
    try:
        client = MongoClient('mongodb://localhost:27017/')
        with client:    
            db = client[DBNAME]
            coll = db[COLLNAME]
            MAXDATE = coll.find_one(sort=[(MAXDATEPARAM, -1)])[MAXDATEPARAM]
            return(MAXDATE)
    except:
        print("Exception occurred during getting max date", DBNAME, COLLNAME, MAXDATEPARAM)

def get_coll_as_table(DBNAME, COLLNAME, MAXDATEPARAM="AAMDATE"):
    try:
        client = MongoClient('mongodb://localhost:27017/')
        with client:    
            db = client[DBNAME]
            coll = db[COLLNAME]
            MAXDATE = coll.find_one(sort=[(MAXDATEPARAM, -1)])[MAXDATEPARAM]
            return(pd.DataFrame(list( coll.find({MAXDATEPARAM: MAXDATE}))).drop(C_COLSTODROP, axis=1))
    except:
        print("Exception occurred during getting collection data. ", DBNAME, COLLNAME, MAXDATEPARAM)
    

MAXDATETZ = get_max_date_from_tz(C_DBNAME)
export_FILENAME = EXPORT_PATH + MAXDATETZ + "_5G.xlsx"
sCount = 0
with pd.ExcelWriter(export_FILENAME, engine='xlsxwriter',
                        options={'strings_to_numbers': True}) as writer:
    for tables in TABLES_NEEDED_5G:
        sCount = sCount + 1
        df = get_coll_as_table(C_DBNAME, tables, C_DATEPARAM)
        df.to_excel(writer, sheet_name=str(sCount) + "_" + tables[:25], index=False) #"Sheetname should be less than 32 for excel
        if (sCount % 10) == 0:
            print("Processed ", sCount," tables.")
	
